'\"
'\" Copyright (c) 1993 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2016/17 Christian Werner <chw at ch minus werner dot de>
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\"
.TH uvc n 8.6 Tk "Tk Extension Commands"
.\" ---- man.macros begin ----
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.\" ---- man.macros end ----
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
uvc \- Interface to UVC cameras using \fBlibuvc\fR
.SH SYNOPSIS
\fBpackage require tcluvc\fR
.br
\fBuvc \fIoption\fR ?\fIarg ...\fR?
.BE
.SH DESCRIPTION
.PP
This command provides several operations to interface UVC USB cameras using
the infrastructure provided by \fBlibuvc\fR and \fBlibusb\fR which is
available on common Linux, FreeBSD, and MacOSX platforms and sometimes
found working on Android devices. \fIOption\fR indicates which operation
to carry out. Any unique abbreviation for \fIoption\fR is acceptable.
The valid options are:
.TP
\fBuvc close\fR \fIdevid\fR
.
Closes the device identified by \fIdevid\fR which has been opened before
using \fBuvc open\fR.
.TP
\fBuvc convmode\fR \fIdevid\fR ?\fIflag\fR?
.
Reports or modifies the conversion mode for frames acquired from the
opened device identified by \fIdevid\fR. Conversion mode 1 (on/true)
performs frame format/color space conversions in the special UVC
thread which controls the USB transfers, mode 0 (off/false) does
this instead in the normal Tcl event loop. The default mode is 1.
.TP
\fBuvc counters\fR \fIdevid\fR
.
Reports a three element list of statistic counters on the device identified
by \fBdevid\fR. The first element is the number of video frames received,
the second the number of video frames processed with \fBuvc image\fR, and
the third the number of video frames dropped.
.TP
\fBuvc devices\fR
.
Returns device information which can be used for \fBuvc open\fR as a list.
Each device adds three elements to the list: the first element is the
device name as a colon seperated string with two or three fields being
vendor ID (hexadecimal, \fI0x\fR prefix is optional), product ID
(hexadecimal, \fI0x\fR prefix is optional), and bus/device numbers
separated by a dot; the second and third list elements are the vendor name,
and the product name. To open the device, its name (the colon separated
string) must be used, the other two items are available for presentation
purposes. If \fBudev\fR support is available, this list is refreshed on
plug and unplug of devices. Otherwise, the list is a snapshot of suitable
devices currently connected.
.TP
\fBuvc format\fR \fIdevid\fR ?\fIindex fps\fR?
.
Returns or changes the frame format of the device identified by \fIdevid\fR.
The optional parameter \fIindex\fR is an integer number giving the index
of the frame format as returned in \fBuvc listformats\fR. The optional
parameter \fIfps\fR is the frame rate. If omitted, the currently active
index and frame rate are returned. Changing the frame format and rate
is only possible if the device is not capturing images.
.TP
\fBuvc greyshift\fR \fIdevid\fR ?\fIshift\fR?
.
Returns or sets the bit shift to be applied on grey images with a
bit depth higher than 8 which are captured from device \fIdevid\fR.
The default value is 4, which is suitable for greyscale cameras
with 12 bit resolution. The shift is not applied when the \fBimage\fR
subcommand retrieves raw byte array data.
.TP
\fBuvc image\fR \fIdevid\fR ?\fIphotoImage\fR?
.
Copies the most recent captured image of the device \fIdevid\fR into
the photo image identified by \fIphotoImage\fR and returns non-zero on
success or zero if no data transfer has taken place.
If \fIphotoImage\fR is omitted, a four element list is returned with the
first element being the image width, the second the image height,
the third the number of bytes per pixel, and the last the image's pixel
values with 3 bytes per pixel in red, green, blue order, or 1 or 2 bytes
per grey pixel as a byte array. When retrieving the image as byte array
an error is indicated by throwing an exception.
.TP
\fBuvc info\fR ?\fIdevid\fR?
.
Returns information on open devices. If \fIdevid\fR is specified,
a list of two elements is returned, the first being the device name and
the second the image callback command for that device, i.e. the same
arguments which were used on \fBuvc open\fR. If \fIdevid\fR is omitted,
a list of \fIdevid\fRs, i.e. all currently opened devices is returned.
.TP
\fBuvc listen\fR ?\fIcallback\fR?
.
Retrieves or sets the callback command called on plug and unplug of devices.
When a device is plugged or unplugged that callback is invoked with two
additional arguments: the type of event (\fBadd\fR or \fBremove\fR)
and the device name (see \fBuvc devices\fR for the naming convention)
which was added or removed. Only useable if \fBudev\fR support is available.
.TP
\fBuvc listformats\fR \fIdevid\fR
.
Returns a dictionary keyed by a format index as integer with the values
being another dictionary with information about the frame size and
frame rate of the respective frame format. The returned indices can be
used in \fBuvc format\fR to switch to another frame size and/or to change
the frame rate.
.TP
\fBuvc mbcopy\fR \fIbytearray1 bytearray2 mask\fR
.
Copies the content of RGB byte array \fIbytearray2\fR into the byte array
\fIbytearray1\fR using an RGB \fImask\fR. Both byte arrays must have identical
length which must be a multiple of 3 (for RGB). The main purpose of this
command is to combine images from two cameras into an anaglyph 3D, where
(for a red-cyan anaglyph) the left camera image uses mask 0xFF0000
(red component) and the right camera image uses mask 0x00FFFF
(green and blue components).
.TP
\fBuvc mcopy\fR \fIphoto1 photo2 mask\fR
.
Copies the content of the photo image \fIphoto2\fR into the photo image
\fIphoto1\fR using an ARGB \fImask\fR. Both photo images must have identical
width, height, and depth. The main purpose of this command is to combine
images from two cameras into an anaglyph 3D, where (for a red-cyan anaglyph)
the left camera image uses mask 0x00FF0000 (red component) and the right
camera image uses mask 0x0000FFFF (green and blue components).
.TP
\fBuvc mirror\fR \fIdevid\fR ?\fIx y\fR?
.
Retrieves or sets flags to mirror captured images along the X or Y axis.
Parameters \fIx\fR and \fIy\fR if specified must be boolean values.
.TP
\fBuvc open\fR \fIdevname callback\fR
.
Opens the device with device name \fIdevname\fR and establishes
\fIcallback\fR as command to be invoked on captured images and
finally returns a \fIdevid\fR, i.e. a handle to further deal with
the device. An additional parameter is appended when \fIcallback\fR
is invoked: the \fIdevid\fR of the device. For the format of
\fIdevname\fR see the description of \fBuvc devices\fR.
.TP
\fBuvc orientation\fR \fIdevid\fR ?\fIdegrees\fR?
.
Retrieves or sets the orientation of captured images regarding image
rotation. \fIDegrees\fR if specified must be an integer number.
.TP
\fBuvc parameters\fR \fIdevid\fR ?\fIkey value ...\fR?
.
Returns or changes device parameters for the device identified by \fIdevid\fR
given as key-value pairs, e.g. \fBbrightness 100\fR will change the brightness
setting of captured images to the device dependent value 100. The command
returns the current device parameters (after the potential change, when keys
and values were given) as a key-value list which can be processed with
\fBarray set\fR or \fBdict get\fR.
.TP
\fBuvc record\fR \fIdevid\fR \fBframe\fR \fIwidth height bpp bytearray\fR
.
Transcodes the frame described by \fIwidth\fR, \fIheight\fR, \fIbpp\fR, and
\fIbytearray\fR to JPEG and writes the result to the recording file or stream.
The recording must have been started with the \fB\-user\fR option. An integer
number is returned as result: 1 indicates successful write, 0 no write due
to frame rate constraints, and -1 an error during the write.
.TP
\fBuvc record\fR \fIdevid\fR \fBpause\fR
.
Pauses recording to a file or stream.
.TP
\fBuvc record\fR \fIdevid\fR \fBresume\fR
.
Continues recording to a file or stream.
.TP
\fBuvc record\fR \fIdevid\fR \fBstart\fR \fIoptions ...\fR
.
Starts recording to a file or stream. \fIOptions\fR control the data
format, frames per second, and output channel. The option \fB\-fps\fR
specifies the approximate rate in frames per second as a floating
point number. The option \fB\-chan\fR specifies the channel to which the
frames are written. This channel is detached from the Tcl interpreter
and controlled solely by the \fBuvc record\fR command. The \fB\-boundary\fR
option specifies a MIME multipart boundary string and selects the
MIME type \fBmultipart/x-mixed-replace\fR suitable for streaming to a
web browser. The content type delivered to the browser is \fBimage/jpeg\fR.
If the \fB\-boundary\fR option is omitted, the output format is raw AVI
and requires the channel to be seek-able. The option \fB\-mjpeg\fR
forces the recorded data to JPEG format, i.e. a transcoding to JPEG
will be performed in software, if the device doesn't already deliver
a JPEG stream. The option \fB\-user\fR turns off automatic frame
write operations to the recording file or stream when a frame is
delivered from the device. Instead,
\fBuvc record\fR \fIdevid\fR \fBframe\fR must be invoked in the
callback function. The \fB\-user\fR option implies \fB\-mjpeg\fR.
.TP
\fBuvc record\fR \fIdevid\fR \fBstate\fR
.
Returns the current recording state as \fBstop\fR, \fBrecording\fR,
\fBpause\fR, or \fBerror\fR. The state \fBerror\fR indicates a write
error on the file or stream. In this case no further frames will be
written.
.TP
\fBuvc record\fR \fIdevid\fR \fBstop\fR
.
Finishes recording to a file or stream and closes the underlying channel.
.TP
\fBuvc start\fR \fIdevid\fR
Starts capturing images of the device identified by \fIdevid\fR. When
an image is ready, the callback command set on \fBuvc open\fR is
invoked.
.TP
.
\fBuvc state\fR \fIdevid\fR
Returns the image capture state of the device identified by \fIdevid\fR.
The result is the string \fBcapture\fR if the device is started,
\fBstopped\fR if the device is stopped, or \fBerror\fR if an error
has been detected while image capture was active.
.TP
\fBuvc stop\fR \fIdevid\fR
.
Stops capturing images of the device identified by \fIdevid\fR.
.TP
\fBuvc tophoto\fR \fIwidth height bpp bytearray\fR ?\fIrot mirrorx mirrory\fR?
.
Makes the RGB (\fIbpp\fR is 3) or gray (\fIbpp\fR is 1) byte array
\fIbytearray\fR of \fIwidth\fR times \fIheight\fR pixels into a Tk
photo image. Optionally, the data is rotated by \fIrot\fR degrees
(possible values 0, 90, 180, 270) and/or mirrored along the X and/or
Y axis as specified by the boolean values \fImirrorx\fR and \fImirrory\fR.
.
.PP
The \fBuvc\fR command tries to lazy load Tk, thus allowing to use it
from a normal \fBtclsh\fR. Only when a photo image is required by a
subcommand, Tk must be available and an attempt to load it is made.
.
.SH "SEE ALSO"
file(n), open(n), close(n), photo(n), image(n)
.SH KEYWORDS
files, image, photo, video, camera, USB
'\" Local Variables:
'\" mode: nroff
'\" fill-column: 78
'\" End:
